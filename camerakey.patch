diff --git a/core/java/android/view/KeyEvent.java b/core/java/android/view/KeyEvent.java
index 86554fee04b..d18f2de16f8 100644
--- a/core/java/android/view/KeyEvent.java
+++ b/core/java/android/view/KeyEvent.java
@@ -1872,6 +1872,7 @@ public class KeyEvent extends InputEvent implements Parcelable {
         switch (keyCode) {
             case KeyEvent.KEYCODE_BACK:
             case KeyEvent.KEYCODE_MENU:
+            case KeyEvent.KEYCODE_CAMERA:
             case KeyEvent.KEYCODE_WAKEUP:
             case KeyEvent.KEYCODE_PAIRING:
             case KeyEvent.KEYCODE_STEM_1:
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index f0867de83b6..214e6d0edfc 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -588,6 +588,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     // to hold wakelocks during dispatch and eliminating the critical path.
     volatile boolean mPowerKeyHandled;
     volatile boolean mBackKeyHandled;
+    volatile boolean mCameraKeyHandled;
     volatile boolean mBeganFromNonInteractive;
     volatile int mPowerKeyPressCounter;
     volatile boolean mEndCallKeyHandled;
@@ -942,6 +943,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private static final int MSG_DISPATCH_VOLKEY_WITH_WAKE_LOCK = 31;
     private static final int MSG_TOGGLE_TORCH = 32;
     private static final int MSG_DISPATCH_VOLKEY_SKIP_TRACK = 33;
+    private static final int MSG_CAMERA_LONG_PRESS = 34;
 
     private static final int MSG_REQUEST_TRANSIENT_BARS_ARG_STATUS = 0;
     private static final int MSG_REQUEST_TRANSIENT_BARS_ARG_NAVIGATION = 1;
@@ -1067,6 +1069,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 case MSG_RINGER_TOGGLE_CHORD:
                     handleRingerChordGesture();
                     break;
+                case MSG_CAMERA_LONG_PRESS:
+                    cameraLongPress((KeyEvent) msg.obj);
+                    break;
                 case MSG_DISPATCH_VOLKEY_SKIP_TRACK: {
                     sendSkipTrackEventToStatusBar(msg.arg1);
                     mVolumeMusicControlActive = true;
@@ -1326,6 +1331,27 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mLogger.action(MetricsProto.MetricsEvent.ACTION_HUSH_GESTURE, mRingerToggleChord);
     }
 
+    private void interceptCameraKeyDown(KeyEvent event) {
+        MetricsLogger.count(mContext, "key_camera_down", 1);
+        // Reset camera key state for long press
+        mCameraKeyHandled = false;
+	
+        Message msg = mHandler.obtainMessage(MSG_CAMERA_LONG_PRESS, event);
+        msg.setAsynchronous(true);
+        mHandler.sendMessageDelayed(msg,
+                ViewConfiguration.get(mContext).getDeviceGlobalActionKeyTimeout());
+    }
+	
+    private boolean interceptCameraKeyUp() {
+        // Cache handled state
+        boolean handled = mCameraKeyHandled;
+	
+        // Reset back long press state
+        cancelPendingCameraKeyAction();
+	
+        return handled;
+    }
+
     IStatusBarService getStatusBarService() {
         synchronized (mServiceAquireLock) {
             if (mStatusBarService == null) {
@@ -1706,6 +1732,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    private void cancelPendingCameraKeyAction() {
+        if (!mCameraKeyHandled) {
+            mCameraKeyHandled = true;
+            mHandler.removeMessages(MSG_CAMERA_LONG_PRESS);
+        }
+    }
+
     private void powerPress(long eventTime, boolean interactive, int count) {
         if (mScreenOnEarly && !mScreenOnFully) {
             Slog.i(TAG, "Suppressed redundant power key press while "
@@ -1910,6 +1943,29 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    private void cameraLongPress(KeyEvent event) {
+        mCameraKeyHandled = true;
+	
+        boolean keyguardActive = mKeyguardDelegate == null
+                ? false
+                : mKeyguardDelegate.isShowing();
+        Intent intent = new Intent(keyguardActive
+                ? MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE
+                : MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
+        ResolveInfo resolveInfo = mContext.getPackageManager().resolveActivityAsUser(intent,
+                PackageManager.MATCH_DEFAULT_ONLY,
+                mCurrentUserId);
+        String packageToLaunch = (resolveInfo == null || resolveInfo.activityInfo == null)
+                ? null : resolveInfo.activityInfo.packageName;
+        List<ActivityManager.RunningTaskInfo> tasks =
+                mContext.getSystemService(ActivityManager.class).getRunningTasks(1);
+	
+        if (packageToLaunch != null && (tasks.isEmpty() ||
+                !packageToLaunch.equals(tasks.get(0).topActivity.getPackageName()))) {
+            startActivityAsUser(intent, UserHandle.CURRENT_OR_SELF);
+        }
+    }
+
     private void accessibilityShortcutActivated() {
         mAccessibilityShortcutController.performAccessibilityShortcut();
     }
@@ -7244,6 +7300,19 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 }
                 break;
             }
+            case KeyEvent.KEYCODE_CAMERA: {
+                if (down) {
+                    interceptCameraKeyDown(event);
+                } else {
+                    boolean handled = interceptCameraKeyUp();
+	
+                    // Don't pass camera press to app if we've already handled it via long press
+                    if (handled) {
+                        result &= ~ACTION_PASS_TO_USER;
+                    }
+                }
+                break;
+            }
         }
 
         if (useHapticFeedback) {
@@ -7356,7 +7425,6 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             case KeyEvent.KEYCODE_MEDIA_RECORD:
             case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
             case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK:
-            case KeyEvent.KEYCODE_CAMERA:
                 return false;
         }
         return true;
